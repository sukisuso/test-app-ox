{"version":3,"sources":["components/admin/Test.js","components/admin/List.js","components/client/Client.js","App.js","serviceWorker.js","index.js"],"names":["Test","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeName","event","setState","name","target","value","changeDesc","description","addQuestion","prevState","questions","currentQuestion","toConsumableArray","concat","changeQuestion","saveTest","body","state","fetch","method","headers","Accept","Content-Type","JSON","stringify","then","response","catch","error","console","log","bind","assertThisInitialized","react_default","a","createElement","Card_default","CardContent_default","TextField_default","label","onChange","margin","Divider_default","Table_default","TableBody_default","map","question","i","TableRow_default","TableCell_default","component","key","Button_default","variant","color","aria-label","onClick","Add_default","Component","List","showAnswer","answer","answerSelected","componentDidMount","data","ok","json","answers","undefined","_this2","TableHead_default","userName","test","e","react","Client","changeUserName","setAnswer","index","oldAnswers","newAnswer","slice","selectTest","_","find","tests","_id","saveAnswers","InputLabel_default","htmlFor","Select_default","testSelected","inputProps","id","MenuItem_default","Admin","_ref","match","location","Link","to","url","Switch","Route","exact","path","render","props","admin_Test","assign","admin_List","App","className","BrowserRouter","AppBar_default","position","Toolbar_default","Boolean","window","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f4fae6c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nclass Test extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: '',\r\n      description: '',\r\n      questions: [],\r\n      currentQuestion: '',\r\n    };\r\n\r\n    this.saveTest = this.saveTest.bind(this);\r\n  }\r\n\r\n  changeName = (event) => {\r\n    this.setState({name: event.target.value});\r\n  }\r\n\r\n  changeDesc = (event) => {\r\n    this.setState({description: event.target.value});\r\n  }\r\n\r\n  addQuestion = (event) => {\r\n    this.setState(prevState => ({\r\n      questions: prevState.currentQuestion ? [...prevState.questions, prevState.currentQuestion] : [...prevState.questions],\r\n      currentQuestion: '',\r\n    }))\r\n  }\r\n\r\n  changeQuestion = (event) => {\r\n    this.setState({currentQuestion: event.target.value});\r\n  }\r\n\r\n  saveTest = (event) => {\r\n    const body = {\r\n      name: this.state.name,\r\n      description: this.state.description,\r\n      questions: this.state.questions,\r\n    };\r\n\r\n    fetch(\"/api/test\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Accept': 'application/json, text/plain, */*',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(body),\r\n    }).then((response) => {\r\n      this.setState({description: '', name: '', currentQuestion: '', questions: []});\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>New test</h2>\r\n        <Card>\r\n          <CardContent>\r\n            <form>\r\n              <TextField\r\n                label=\"Test name\"\r\n                value={this.state.name}\r\n                onChange={this.changeName}\r\n                margin=\"normal\"\r\n              />\r\n              <TextField\r\n                label=\"Description\"\r\n                value={this.state.description}\r\n                onChange={this.changeDesc}\r\n                margin=\"normal\"\r\n              />\r\n              <Divider />\r\n              <Table>\r\n                <TableBody>\r\n                  \r\n                  {this.state.questions.map((question, i) => {\r\n                    return (\r\n                      <TableRow>\r\n                        <TableCell component=\"th\"  key={i}>\r\n                          {question}\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n              <TextField\r\n                label=\"Question\"\r\n                value={this.state.currentQuestion}\r\n                onChange={this.changeQuestion}\r\n                margin=\"normal\"\r\n              />\r\n              <Button variant=\"fab\" color=\"primary\" aria-label=\"Add\" onClick={this.addQuestion}>\r\n                <AddIcon />\r\n              </Button>\r\n            </form>\r\n          \r\n            <Divider />\r\n            <Button color=\"primary\" onClick={this.saveTest}>Create</Button>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Test;\r\n","import React, { Component, Fragment } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nclass List extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      answers: [],\r\n      answerSelected: undefined,\r\n    };\r\n  }\r\n\r\n  showAnswer = (answer, event) => {\r\n    this.setState({ answerSelected: answer });\r\n  }\r\n\r\n  componentDidMount = (event) => {\r\n    fetch(\"/api/answer\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        'Accept': 'application/json, text/plain, */*',\r\n        'Content-Type': 'application/json'\r\n      },\r\n    }).then((data) => {\r\n      if (data.ok) {\r\n        data.json().then(json => {\r\n          this.setState({answers: json});\r\n        });\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Test list</h2>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>User</TableCell>\r\n              <TableCell>Test name</TableCell>\r\n              <TableCell></TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {this.state.answers.map((answer) => {\r\n              return (\r\n                <TableRow>\r\n                  <TableCell component=\"th\">\r\n                    {answer.userName}\r\n                  </TableCell>\r\n                  <TableCell component=\"th\">\r\n                    {answer.test.name}\r\n                  </TableCell>\r\n                  <TableCell component=\"th\">\r\n                  <Button color=\"primary\" onClick={(e) => this.showAnswer(answer, e)}>View</Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n        <Divider />\r\n        {this.state.answerSelected && (\r\n          <div>\r\n            <Fragment>\r\n              <h2>Test -> {this.state.answerSelected.test.name} [{this.state.answerSelected.userName}]</h2>\r\n            </Fragment>\r\n            <Fragment>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Question</TableCell>\r\n                    <TableCell>Answer</TableCell>\r\n                    <TableCell></TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {this.state.answerSelected.answers.map((answer) => {\r\n                    return (\r\n                      <TableRow>\r\n                        <TableCell component=\"th\">\r\n                          {answer.question}\r\n                        </TableCell>\r\n                        <TableCell component=\"th\">\r\n                          {answer.answer}\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </Fragment>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component, Fragment } from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport _ from 'lodash';\r\n\r\nclass Client extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      tests: [],\r\n      test: undefined,\r\n      userName: '',\r\n      answers: [],\r\n    };\r\n\r\n    this.selectTest = this.selectTest.bind(this);\r\n    this.saveAnswers = this.saveAnswers.bind(this);\r\n    this.setAnswer = this.setAnswer.bind(this);\r\n  }\r\n\r\n  changeUserName = (event) => {\r\n    this.setState({userName: event.target.value});\r\n  }\r\n\r\n  setAnswer = (index, event) => {\r\n    const oldAnswers = this.state.answers;\r\n    const newAnswer = this.state.answers[index];\r\n    newAnswer.answer = event.target.value;\r\n    this.setState({ answers: [\r\n      ...oldAnswers.slice(0, index),\r\n      newAnswer,\r\n      ...oldAnswers.slice(index + 1),\r\n    ]});\r\n  }\r\n\r\n  selectTest = (event) => {\r\n    if (!event || !event.target || !event.target.value) {\r\n      return;\r\n    }\r\n\r\n    const testSelected = _.find(this.state.tests, {_id: event.target.value});\r\n    const answers = testSelected.questions.map((question)=> {return {question: question, answer: ''}})\r\n    this.setState({test: event.target.value, answers});\r\n  }\r\n\r\n  componentDidMount = (event) => {\r\n    fetch(\"/api/test\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        'Accept': 'application/json, text/plain, */*',\r\n        'Content-Type': 'application/json'\r\n      },\r\n    }).then((data) => {\r\n      if (data.ok) {\r\n        data.json().then(json => {\r\n          this.setState({tests: json});\r\n        });\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  saveAnswers = (event) => {\r\n    fetch(\"/api/answer\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Accept': 'application/json, text/plain, */*',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(this.state),\r\n    }).then((response) => {\r\n      this.setState({test: undefined});\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Fill New Test</h2>\r\n        <InputLabel htmlFor=\"age-simple\">Select test to fill</InputLabel>\r\n        <Select\r\n          value={this.state.testSelected}\r\n          onChange={this.selectTest}\r\n          inputProps={{\r\n            name: 'name',\r\n            id: '_id',\r\n          }}\r\n        >\r\n          {this.state.tests.map(test =>\r\n            <MenuItem value={test._id}>{test.name}</MenuItem>\r\n          )}\r\n        </Select>\r\n        <Divider />\r\n        {this.state.test && (\r\n          <div>\r\n            <TextField\r\n              label=\"User name\"\r\n              value={this.state.userName}\r\n              onChange={this.changeUserName}\r\n              margin=\"normal\"\r\n            />\r\n            <Divider />\r\n            {this.state.answers.map((answer, i) => {\r\n              return (\r\n                <div>\r\n                  <Fragment>\r\n                    <TextField\r\n                      label={answer.question}\r\n                      value={answer.answer}\r\n                      onChange={(e) => this.setAnswer(i, e)}\r\n                      margin=\"normal\"\r\n                    />\r\n                  </Fragment>\r\n                  <Divider />\r\n                </div>\r\n              );\r\n            })}\r\n            <Divider />\r\n            <Button color=\"primary\" onClick={this.saveAnswers}>Create response</Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Client;\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom'\nimport Button from '@material-ui/core/Button';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Test from './components/admin/Test';\nimport List from './components/admin/List';\nimport Client from './components/client/Client';\nimport './App.css';\n\nconst Admin = ({ match, location }) => {\n  return (\n    <div>\n        <h2>Admin Page</h2>\n        <div>\n          <Button color=\"primary\"> \n            <Link to={match.url + \"/new\"}>Create new Test</Link>\n          </Button>\n          <Button color=\"primary\">\n            <Link to={match.url + \"/list\"}>View user answers</Link>\n          </Button>\n        </div>\n        <div>\n        <Switch location={location}>\n          <Route\n            exact\n            path={match.url + \"/new\"}\n            render={props => <Test {...props} color=\"red\" />}\n          />\n          <Route\n            path={match.url + \"/list\"}\n            render={props => <List {...props} color=\"blue\" />}\n          />\n        </Switch>\n      </div>\n      </div>\n  );\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n         <Router>\n          <div>\n            <AppBar position=\"static\" color=\"default\">\n              <Toolbar>\n                <Button color=\"primary\">\n                  <Link to=\"/admin\">Admin Page</Link>\n                </Button>\n                <Button color=\"primary\">\n                  <Link to=\"/client\">Client Page</Link>\n                </Button>\n              </Toolbar>\n            </AppBar>\n\n            <div>\n              <Switch>\n                <Route path=\"/admin\" component={Admin} />\n                <Route path=\"/client\" component={Client} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}